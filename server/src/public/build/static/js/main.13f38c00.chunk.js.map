{"version":3,"sources":["redux/reducer/movieReducer.ts","components/MovieTable.tsx","redux/store.ts","api/MovieApi.ts","components/UploadImg.tsx","components/MovieForm.tsx","page/movie/Add.tsx","redux/action/movieAction.ts","page/movie/List.tsx","page/movie/edit.tsx","page/Home.tsx","page/Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultState","condition","page","take","data","isLoading","total","totalPage","deleteMovie","state","id","newData","filter","ele","Math","ceil","saveMovie","movies","editMovie","payload","map","item","movie","setCondition","setLoading","setTotal","switchChange","find","value","type","MovieSwitchValue","store","createStore","action","applyMiddleware","thunk","logger","MovieApi","axios","post","patch","delete","search","get","params","formData","UploadImg","isPreview","this","props","uid","url","name","PlusOutlined","style","marginTop","setState","fileList","getFileList","listType","onPreview","handlePreview","bind","onRemove","onChange","customRequest","a","form","FormData","append","filename","file","uploadPoster","result","err","message","error","getUploadBtn","visible","title","footer","onCancel","alt","width","src","Component","MovieForm","formRef","React","createRef","newObj","key","current","setFieldsValue","getFormFieldValue","ref","labelCol","span","offset","wrapperCol","padding","onFinish","length","success","history","push","forEach","Item","label","rules","required","height","Group","options","valuePropName","min","max","rows","htmlType","withRouter","Add","add","MovieTable","deleteModel","deleteLoading","deleteMovieId","onLoad","onDelete","dataIndex","render","text","ellipsis","join","checked","event","onSwitchChange","isClassic","isComing","isHot","to","size","fontSize","marginRight","danger","onClick","dataSource","columns","getColumns","loading","sticky","offsetHeader","rowKey","pagination","pageSize","pageSizeOptions","showSizeChanger","defaultPageSize","onChangePage","cancelText","okText","okType","onOk","confirmLoading","color","movieActions","fetchMovie","dispatch","getstate","deleteFetchMovie","fetchMovieSwitch","edit","List","connect","Promise","resolve","useState","setMovies","useLayoutEffect","findById","match","then","Home","Header","Layout","Sider","Content","LayoutContainer","className","theme","selectedKeys","location","pathname","inlineIndent","icon","BarChartOutlined","exact","FileAddOutlined","path","component","Edit","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13f38c00.chunk.js","sourcesContent":["import {IMovie} from \"./movieType\";\r\nimport {TActionsMovie} from \"../action/movieAction\";\r\nimport {Movie, MovieEdit} from \"../../commonType/Movie\";\r\nimport {SearchParams} from \"../../commonType/SearchParams\";\r\nimport {MovieSwitchValue} from \"../../components/MovieTable\";\r\n\r\n\r\nconst defaultState: IMovie = {\r\n    condition: {\r\n        page: 1,\r\n        take: 10,\r\n    },\r\n    data: [],\r\n    isLoading: false,\r\n    total: 0,\r\n    totalPage:0,\r\n}\r\n\r\nfunction deleteMovie(state: IMovie, id: string):IMovie {\r\n    const newData = state.data.filter(ele => ele.id !== id);\r\n    return {\r\n        ...state,\r\n        data: newData,\r\n        totalPage: Math.ceil((state.total - 1) / state.condition.take)\r\n    }\r\n}\r\n\r\nfunction saveMovie(state: IMovie, movies: Movie[]) {\r\n    return {\r\n        ...state,\r\n        data: movies,\r\n    }\r\n}\r\n\r\nfunction editMovie(state:IMovie,payload:{movie:MovieEdit,id:string}):IMovie{\r\n    const copyData = [...state.data];\r\n    const newData = copyData.map(item=>{\r\n        if(item.id === payload.id){\r\n            return {...item,...payload.movie};\r\n        }\r\n        return  item;\r\n    })\r\n    return{\r\n        ...state,\r\n        data:newData\r\n    }\r\n}\r\n\r\nfunction setCondition(state: IMovie, condition:SearchParams):IMovie{\r\n    return {\r\n        ...state,\r\n        condition:{\r\n            ...state.condition,\r\n            ...condition\r\n        },\r\n        totalPage: Math.ceil(state.total / (!condition.take ? state.condition.take : condition.take))\r\n    }\r\n}\r\n\r\nfunction setLoading(state:IMovie,isLoading:boolean):IMovie{\r\n    return {\r\n        ...state,\r\n        isLoading,\r\n    }\r\n}\r\n\r\nfunction setTotal(state:IMovie,total:number):IMovie{\r\n    return {\r\n        ...state,\r\n        total:total,\r\n        totalPage: Math.ceil(total / state.condition.take)\r\n    }\r\n}\r\n\r\nfunction switchChange(state:IMovie,payload:{type:MovieSwitchValue,value:boolean,id:string}){\r\n    const movie = state.data.find(value => value.id === payload.id);\r\n    if(!movie){\r\n        return state;\r\n    }\r\n    const copyState = {...state};\r\n    const newData = copyState.data.map(item=>{\r\n        if(item.id === payload.id){\r\n            item[payload.type] = payload.value;\r\n        }\r\n        return item;\r\n    })\r\n    return {\r\n        ...state,\r\n        data:newData,\r\n    }\r\n\r\n}\r\n\r\nexport default function movieReducer(state: IMovie = defaultState, action: TActionsMovie): IMovie {\r\n\r\n    switch (action.type) {\r\n        case \"delete_movie\":\r\n            return deleteMovie(state,action.payload);\r\n        case \"save_movies\":\r\n            return saveMovie(state,action.payload);\r\n        case \"edit_movies\":\r\n            return editMovie(state, action.payload);\r\n        case \"set_condition\":\r\n            return setCondition(state,action.payload);\r\n        case \"set_loading\":\r\n            return setLoading(state, action.payload);\r\n        case \"set_total\":\r\n            return setTotal(state, action.payload);\r\n        case \"switch_movie\":\r\n            return switchChange(state, action.payload);\r\n        default :\r\n            return state;\r\n    }\r\n}","import {Table, Switch, Image, Button, Modal} from 'antd';\r\nimport React from \"react\";\r\nimport {IMovie} from \"../redux/reducer/movieType\";\r\nimport {ColumnsType} from \"antd/lib/table\";\r\nimport {Movie} from \"../commonType/Movie\";\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\nexport enum MovieSwitchValue {\r\n    isHot = \"isHot\",\r\n    isComing = \"isComing\",\r\n    isClassic = \"isClassic\",\r\n}\r\n\r\nexport interface MovieTableEvent {\r\n    onSwitchChange: (type: MovieSwitchValue, value: boolean, id: string) => void,\r\n    onDelete: (id: string) => Promise<void>,\r\n    onLoad: () => void,\r\n    onChangePage: (newPage: number, pageSize: number) => void\r\n}\r\n\r\ntype TState = {\r\n    deleteModel: boolean,\r\n    deleteMovieId: string,\r\n    deleteLoading: boolean,\r\n}\r\n\r\nexport default class MovieTable extends React.Component<IMovie & MovieTableEvent, TState> {\r\n    state = {\r\n        deleteModel: false,\r\n        deleteLoading: false,\r\n        deleteMovieId: \"\",\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.onLoad) {\r\n            this.props.onLoad();\r\n        }\r\n    }\r\n\r\n    private async deleteMovie() {\r\n        return await this.props.onDelete(this.state.deleteMovieId);\r\n    }\r\n\r\n    private getColumns(): ColumnsType<Movie> {\r\n        return [{\r\n            dataIndex: \"poster\",\r\n            title: \"封面\",\r\n            render: text => {\r\n                return <Image\r\n                    width={70}\r\n                    src={text}\r\n                />\r\n            }\r\n        }, {\r\n            title: \"名称\",\r\n            dataIndex: \"name\",\r\n            ellipsis:true,\r\n        }, {\r\n            dataIndex: \"areas\",\r\n            title: \"地区\",\r\n            ellipsis:true,\r\n            render: (text: []) => {\r\n                return text.join(\", \")\r\n            },\r\n        }, {\r\n            dataIndex: \"isClassic\",\r\n            title: \"是否经典\",\r\n            render: (text, movie) => {\r\n                return (<Switch checked={text} onChange={(checked, event) => {\r\n                    this.props.onSwitchChange(MovieSwitchValue.isClassic, checked, movie.id as string);\r\n                }}/>)\r\n            }\r\n        }, {\r\n            dataIndex: \"isComing\",\r\n            title: \"正在上映\",\r\n            render: (text, movie) => {\r\n                return (<Switch checked={text} onChange={(checked) => {\r\n                    this.props.onSwitchChange(MovieSwitchValue.isComing, checked, movie.id as string);\r\n                }}/>)\r\n            }\r\n        }, {\r\n            dataIndex: \"isHot\",\r\n            title: \"是否热门\",\r\n            render: (text, movie) => {\r\n                return (<Switch checked={text} onChange={checked => {\r\n                    this.props.onSwitchChange(MovieSwitchValue.isHot, checked, movie.id as string);\r\n                }}/>)\r\n            }\r\n        }, {\r\n            dataIndex: \"timeLong\",\r\n            title: \"时长\",\r\n            render: (text) => {\r\n                return `${text}分钟`\r\n            }\r\n        }, {\r\n            dataIndex: \"types\",\r\n            title: \"电影类型\",\r\n            ellipsis:true,\r\n            render: (text: []) => {\r\n                return text.join(\", \")\r\n            }\r\n        }, {\r\n            dataIndex: \"description\",\r\n            ellipsis:true,\r\n            title: \"描述\"\r\n        }, {\r\n            title: \"操作\",\r\n            dataIndex: \"id\",\r\n            render: text => {\r\n                return (<>\r\n                    <NavLink to={\"/edit/\" + text}>\r\n                        <Button type=\"primary\" size=\"small\" style={{fontSize: 12, marginRight: 10}}>编辑</Button>\r\n                    </NavLink>\r\n                    <Button type=\"primary\" danger size=\"small\" style={{fontSize: 12}}\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    ...this.state,\r\n                                    deleteModel: true,\r\n                                    deleteMovieId: text\r\n                                })\r\n                            }}>删除</Button>\r\n                </>)\r\n            }\r\n        }]\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Table dataSource={this.props.data} columns={this.getColumns()}\r\n                       loading={this.props.isLoading}\r\n                       sticky={{offsetHeader: 0}}\r\n                       size=\"small\"\r\n                       rowKey=\"id\"\r\n                       pagination={{\r\n                           current: this.props.condition.page,\r\n                           pageSize: this.props.condition.take,\r\n                           total: this.props.total,\r\n                           pageSizeOptions: ['2', '5', '10', '20'],\r\n                           showSizeChanger: true,\r\n                           defaultPageSize: this.props.condition.take,\r\n                           onChange: (page: number, pageSize?: number) => {\r\n                               this.props.onChangePage(page, pageSize!);\r\n                           }\r\n                       }}\r\n\r\n                />\r\n                <Modal\r\n                    title=\"删除\"\r\n                    cancelText=\"取消删除\"\r\n                    okText=\"确定\"\r\n                    okType=\"danger\"\r\n                    visible={this.state.deleteModel}\r\n                    onOk={async () => {\r\n                        this.setState({\r\n                            ...this.state,\r\n                            deleteLoading: true,\r\n                        })\r\n                        await this.deleteMovie();\r\n                        this.setState({\r\n                            ...this.state,\r\n                            deleteLoading: false,\r\n                            deleteModel: false,\r\n                            deleteMovieId: \"\",\r\n                        })\r\n                    }}\r\n                    confirmLoading={this.state.deleteLoading}\r\n                    onCancel={() => {\r\n                        this.setState({\r\n                            ...this.state,\r\n                            deleteModel: !this.state.deleteModel,\r\n                        })\r\n                    }}\r\n                >\r\n                    <p style={{color: \"red\"}}>确定删除？</p>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}","import {createStore,applyMiddleware} from \"redux\";\r\nimport thunk, {ThunkMiddleware} from \"redux-thunk\";\r\nimport movie from \"./reducer/movieReducer\";\r\nimport {IMovie} from \"./reducer/movieType\";\r\nimport {TActionsMovie} from \"./action/movieAction\";\r\nimport logger from 'redux-logger'\r\n\r\nexport const store = createStore(movie,applyMiddleware(thunk as ThunkMiddleware<IMovie,TActionsMovie>,logger))","import axios from \"axios\";\r\nimport {SearchParams} from \"../commonType/SearchParams\";\r\nimport {ResponseErrorType, ResponseSucceedPageType, ResponseSucceedType} from \"../commonType/ResponseType\";\r\nimport {Movie, MovieEdit} from \"../commonType/Movie\";\r\n\r\nexport default class MovieApi {\r\n\r\n    public static async add(movie:Movie):Promise<ResponseSucceedType<Movie>|ResponseErrorType<[]>>{\r\n        const {data} = await axios.post(\"/api/movie\", movie);\r\n        return data;\r\n    }\r\n    public static async edit(id:string,movie:MovieEdit){\r\n        const {data} = await axios.patch(\"/api/movie/\"+id, movie);\r\n        return data;\r\n    }\r\n    public static async delete(id:string){\r\n        const {data} = await axios.delete(\"/api/movie/\"+id);\r\n        return data;\r\n    }\r\n\r\n    public static async find(search?:SearchParams):Promise<ResponseSucceedPageType<Movie>>{\r\n        const {data} = await axios.get(\"/api/movie\", {\r\n            params: search\r\n        });\r\n        return data;\r\n    }\r\n\r\n    public static async findById(id:string):Promise<ResponseSucceedType<Movie>| ResponseErrorType<string>>{\r\n        const {data} = await axios.get(\"/api/movie/\"+id);\r\n        return data;\r\n    }\r\n\r\n    public static async uploadPoster(formData:any):Promise<ResponseSucceedType<string> | ResponseErrorType<string> >{\r\n        const {data} = await axios.post(\"/api/upload\", formData);\r\n        return data;\r\n    }\r\n};","import {Component} from \"react\";\r\nimport {message, Modal, Upload} from \"antd\";\r\nimport {UploadFile} from \"antd/lib/upload/interface\";\r\nimport {PlusOutlined} from '@ant-design/icons';\r\nimport MovieApi from \"../api/MovieApi\";\r\n\r\ninterface IUploadProps {\r\n    value?: string,\r\n    onChange?: (url: string) => void\r\n}\r\n\r\ninterface IUploadState {\r\n    isPreview: boolean\r\n}\r\n\r\nexport default class UploadImg extends Component<IUploadProps, IUploadState> {\r\n    state = {\r\n        isPreview: false,\r\n    }\r\n\r\n    private getFileList(): UploadFile<any>[] {\r\n        if (this.props.value) {\r\n            return [{\r\n                uid: this.props.value,\r\n                url: this.props.value,\r\n                name: this.props.value,\r\n            }]\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private getUploadBtn() {\r\n        if (!this.props.value) {\r\n            return (<div>\r\n                <PlusOutlined/>\r\n                <div style={{marginTop: 8}}>Upload</div>\r\n            </div>)\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private handlePreview() {\r\n        this.setState({\r\n            ...this.state,\r\n            isPreview: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <Upload\r\n                action=\"/api/upload\"\r\n                fileList={this.getFileList()}\r\n                listType=\"picture-card\"\r\n                name=\"poster\"\r\n                onPreview={this.handlePreview.bind(this)}\r\n                onRemove={() => {\r\n                    if (this.props.onChange) {\r\n                        this.props.onChange(\"\")\r\n                    }\r\n                }}\r\n                customRequest={async (item) => {\r\n                    const form = new FormData();\r\n                    form.append(item.filename, item.file);\r\n                    const result = await MovieApi.uploadPoster(form);\r\n                    if (result.err) {\r\n                        message.error('上传失败,请重试');\r\n                    } else {\r\n                        if (this.props.onChange) {\r\n                            this.props.onChange(result.data)\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {this.getUploadBtn()}\r\n\r\n            </Upload>\r\n            <Modal\r\n                visible={this.state.isPreview}\r\n                title=\"预览\"\r\n                footer={null}\r\n                onCancel={() => {\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isPreview: false,\r\n                    })\r\n                }}\r\n            >\r\n                <img alt=\"example\" style={{width: '100%'}} src={this.props.value}/>\r\n            </Modal>\r\n        </>)\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Form, Input, Button, Checkbox, Switch, InputNumber, message} from 'antd';\r\nimport UploadImg from \"./UploadImg\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {Movie} from \"../commonType/Movie\";\r\nimport {FormInstance} from \"antd/lib/form\";\r\n\r\ninterface IMovieFormProps {\r\n    onChange: (formData: Movie) => Promise<[]>,\r\n    movie?:Movie\r\n}\r\n\r\nclass MovieForm extends Component<IMovieFormProps & RouteComponentProps> {\r\n    formRef = React.createRef<FormInstance<any>>();\r\n\r\n    getFormFieldValue(movie:any){\r\n        const newObj:any = {}\r\n        for (const key in movie) {\r\n            newObj[key] = movie[key];\r\n        }\r\n        return newObj\r\n    }\r\n    componentDidUpdate() {\r\n        if(this.props.movie){\r\n            this.formRef.current?.setFieldsValue(this.getFormFieldValue(this.props.movie))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form\r\n                ref={this.formRef}\r\n                labelCol={{span: 6, offset: 0}}\r\n                wrapperCol={{span: 18, offset: 1}}\r\n                style={{width: 400,padding:\"2em\"}}\r\n                onFinish={async (value) => {\r\n                    const result = await this.props.onChange(value);\r\n                    if(result.length === 0){\r\n                        message.success(\"操作成功\",1,()=>{\r\n                            this.props.history.push(\"/list\")\r\n                        })\r\n                    }else{\r\n                        result.forEach(err=>{\r\n                            message.error(err)\r\n                        })\r\n                    }\r\n                }}\r\n            >\r\n                <Form.Item\r\n                    label=\"电影名称\"\r\n                    name=\"name\"\r\n                    rules={[{required: true, message: '电影名称不能为空'}]}\r\n                >\r\n                    <Input/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"封面\"\r\n                    name=\"poster\"\r\n                    style={{height:104}}\r\n                >\r\n                    <UploadImg/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"地区\"\r\n                    name=\"areas\"\r\n                >\r\n                    <Checkbox.Group options={[\"中国大陆\", \"中国台湾\", \"中国香港\", \"美国\", \"印度\", \"泰国\", \"日韩\"]}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"是否经典\"\r\n                    name=\"isClassic\"\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Switch/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"正在上映\"\r\n                    name=\"isComing\"\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Switch/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"是否热门\"\r\n                    name=\"isHot\"\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Switch/>\r\n\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"时长\"\r\n                    name=\"timeLong\"\r\n                    rules={[{required: true, message: '电影时长不能为空'}]}\r\n                >\r\n                    <InputNumber min={1} max={999}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"电影类型\"\r\n                    name=\"types\"\r\n                >\r\n                    <Checkbox.Group options={[\"喜剧\", \"戏剧\", \"动作\", \"爱情\", \"动漫\", \"纪录\", \"武打\"]}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"描述\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={4}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    wrapperCol={{span: 18, offset: 5}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        提交\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(MovieForm);\r\n","import React from 'react';\r\nimport MovieForm from \"../../components/MovieForm\";\r\nimport MovieApi from \"../../api/MovieApi\";\r\n\r\nexport const Add: React.FC = () => {\r\n    return (<div>\r\n        <MovieForm onChange={async (movie)=>{\r\n            const result = await MovieApi.add(movie);\r\n            if(result.data){\r\n                return []\r\n            }\r\n            return result.err;\r\n        }}/>\r\n    </div>)\r\n}","import {Movie, MovieEdit} from \"../../commonType/Movie\";\r\nimport {IAction} from \"./actionType\";\r\nimport {SearchParams} from \"../../commonType/SearchParams\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {IMovie} from \"../reducer/movieType\"\r\nimport MovieApi from \"../../api/MovieApi\";\r\nimport {MovieSwitchValue} from \"../../components/MovieTable\";\r\n\r\ntype  TSaveActionType = IAction<\"save_movies\", Movie[]>\r\n\r\nfunction saveMovie(movies: Movie[]): TSaveActionType {\r\n    return {\r\n        type: \"save_movies\",\r\n        payload: movies,\r\n    }\r\n}\r\n\r\ntype  TEditActionType = IAction<\"edit_movies\", {movie:MovieEdit,id:string}>\r\n\r\nfunction editMovie(movie: MovieEdit,id:string): TEditActionType {\r\n    return {\r\n        type: \"edit_movies\",\r\n        payload: {\r\n            movie,\r\n            id,\r\n        },\r\n    }\r\n}\r\n\r\ntype TSetConditionType = IAction<\"set_condition\", SearchParams>\r\n\r\nfunction setCondition(condition: SearchParams): TSetConditionType {\r\n    return {\r\n        type: \"set_condition\",\r\n        payload: condition\r\n    }\r\n}\r\n\r\ntype TSetLoading = IAction<\"set_loading\", boolean>\r\n\r\nfunction setLoading(isLoading: boolean): TSetLoading {\r\n    return {\r\n        type: \"set_loading\",\r\n        payload: isLoading,\r\n    }\r\n}\r\n\r\ntype TSetTotal = IAction<\"set_total\", number>\r\n\r\nfunction setTotal(total: number): TSetTotal {\r\n    return {\r\n        type: \"set_total\",\r\n        payload: total,\r\n    }\r\n}\r\n\r\ntype TDeleteAction = IAction<\"delete_movie\", string>\r\n\r\nfunction deleteMovie(id: string): TDeleteAction {\r\n    return {\r\n        type: \"delete_movie\",\r\n        payload: id\r\n    }\r\n}\r\n\r\ntype TSwitchChange = IAction<\"switch_movie\", {type:MovieSwitchValue,value:boolean,id:string}>\r\nfunction switchChange(type:MovieSwitchValue,value:boolean,id:string):TSwitchChange{\r\n    return {\r\n        type:\"switch_movie\",\r\n        payload:{\r\n            type,\r\n            value,\r\n            id,\r\n        }\r\n    }\r\n}\r\n\r\nfunction fetchMovie(condition: SearchParams):ThunkAction<Promise<void>,IMovie,any,TActionsMovie>{\r\n    return async (dispatch,getstate)=>{\r\n        dispatch(setLoading(true));\r\n        dispatch(setCondition(condition))\r\n        const state = getstate();\r\n        const result =await MovieApi.find(state.condition);\r\n        dispatch(saveMovie(result.data));\r\n        dispatch(setTotal(result.total));\r\n        dispatch(setLoading(false));\r\n    }\r\n}\r\n\r\nfunction fetchMovieSwitch(type:MovieSwitchValue,value:boolean,id:string):ThunkAction<Promise<void>,IMovie,any,TActionsMovie>{\r\n    return async (dispatch,getstate)=>{\r\n        dispatch(setLoading(true));\r\n        dispatch(editMovie({[type]:value}, id));\r\n        await MovieApi.edit(id, {[type]: value});\r\n        dispatch(setLoading(false));\r\n    }\r\n}\r\n\r\nfunction deleteFetchMovie(id: string):ThunkAction<Promise<void>,IMovie,any,TActionsMovie>{\r\n    return  async dispatch=>{\r\n        dispatch(setLoading(true));\r\n        const result = await MovieApi.delete(id);\r\n        if(result.data){\r\n            dispatch(deleteMovie(id))\r\n        }\r\n        dispatch(setLoading(false));\r\n    }\r\n}\r\n\r\n\r\nexport type TActionsMovie = TDeleteAction | TSetLoading | TSetConditionType | TSaveActionType | TSetTotal | TSwitchChange | TEditActionType;\r\n\r\nexport const movieActions = {\r\n    deleteMovie,\r\n    setLoading,\r\n    setCondition,\r\n    saveMovie,\r\n    editMovie,\r\n    setTotal,\r\n    fetchMovie,\r\n    deleteFetchMovie,\r\n    switchChange,\r\n    fetchMovieSwitch\r\n}","\r\nimport MovieTable, {MovieTableEvent} from \"../../components/MovieTable\";\r\nimport {connect} from \"react-redux\";\r\nimport {IMovie} from \"../../redux/reducer/movieType\";\r\nimport {Dispatch} from \"react\";\r\nimport {movieActions} from \"../../redux/action/movieAction\";\r\n\r\nfunction mapStateToProps(state:IMovie){\r\n    return state;\r\n}\r\n\r\nfunction mapStateToEvent(dispatch:Dispatch<any>):MovieTableEvent{\r\n    return {\r\n        onSwitchChange(type,value,id){\r\n            dispatch(movieActions.fetchMovieSwitch(type, value, id));\r\n        },\r\n        onDelete(id:string){\r\n           return new Promise<any>(resolve => {\r\n               resolve( dispatch(movieActions.deleteFetchMovie(id)))\r\n           })\r\n        },\r\n        onLoad(){\r\n            dispatch(movieActions.fetchMovie({take:10,page:1}))\r\n        },\r\n        onChangePage(page,pageSize){\r\n            dispatch(movieActions.fetchMovie({page,take:pageSize}))\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst List = connect(mapStateToProps,mapStateToEvent)(MovieTable);\r\n\r\n\r\nexport default List;","import React, {useLayoutEffect, useState} from 'react';\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport MovieApi from \"../../api/MovieApi\";\r\nimport MovieForm from \"../../components/MovieForm\";\r\nimport {Movie, MovieEdit} from \"../../commonType/Movie\";\r\n\r\ninterface IEditProps {\r\n    id: string\r\n}\r\n\r\nconst Edit: React.FC<RouteComponentProps<IEditProps>> = (props) => {\r\n    const [movies,setMovies] = useState<Movie>();\r\n    useLayoutEffect(() => {\r\n        MovieApi.findById(props.match.params.id).then(data => {\r\n            if(!data.err){\r\n                setMovies(data.data);\r\n            }\r\n        })\r\n        // eslint-disable-next-line\r\n    },[])\r\n\r\n    return (<div>\r\n        <MovieForm\r\n            movie={movies}\r\n            onChange={async (movie) => {\r\n                const result = await MovieApi.edit(props.match.params.id,movie as MovieEdit);\r\n                if(result.data){\r\n                    return []\r\n                }\r\n                return result.err;\r\n            }}/>\r\n    </div>)\r\n}\r\n\r\nexport default withRouter(Edit)","import React, {Component} from 'react';\r\n\r\nclass Home extends Component {\r\n    state={\r\n        value:\"\",\r\n    }\r\n    render() {\r\n        return (\r\n                <h1>欢迎使用</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {NavLink, Route} from \"react-router-dom\";\r\nimport {Add} from \"../page/movie/Add\";\r\nimport List from \"../page/movie/List\";\r\nimport \"../style/layout.css\"\r\nimport {BarChartOutlined, FileAddOutlined} from '@ant-design/icons';\r\n\r\nimport {Layout,Menu} from 'antd';\r\nimport Edit from \"./movie/edit\";\r\nimport Home from \"./Home\";\r\nimport {RouteComponentProps} from \"react-router\";\r\n\r\nconst {Header, Sider, Content} = Layout;\r\n\r\nconst LayoutContainer: React.FC<RouteComponentProps> = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <Layout>\r\n                <Header>\r\n                    <NavLink to=\"/\">后台管理系统</NavLink>\r\n                </Header>\r\n                <Layout>\r\n                    <Sider>\r\n                        <Menu\r\n                            theme={\"dark\"}\r\n                            selectedKeys={props.location.pathname as any}\r\n                            inlineIndent={30}>\r\n                            <Menu.Item key=\"/list\" icon={<BarChartOutlined />}><NavLink to=\"/list\" exact={true}>电影列表</NavLink></Menu.Item>\r\n                            <Menu.Item key=\"/add\" icon={<FileAddOutlined />}><NavLink to=\"/add\" exact>添加电影</NavLink></Menu.Item>\r\n                        </Menu>\r\n                    </Sider>\r\n                    <Content>\r\n                        <div className=\"content\">\r\n                            <Route path=\"/\" exact component={Home}/>\r\n                            <Route path=\"/list\" exact component={List}/>\r\n                            <Route path=\"/add\" exact component={Add}/>\r\n                            <Route path=\"/edit/:id\" exact component={Edit}/>\r\n                        </div>\r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LayoutContainer;","import React from 'react';\nimport {store} from \"./redux/store\";\nimport Layout from \"./page/Layout\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\n\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <BrowserRouter>\n                <Route path=\"/\" component={Layout}/>\n            </BrowserRouter>\n        </Provider>);\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}